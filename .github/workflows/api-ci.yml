name: API CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.2 
      
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build
        run: go build -v ./...

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  docker-build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          FULL_IMAGE_NAME="$ECR_REGISTRY/fanc-app:$IMAGE_TAG"
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            FULL_IMAGE_NAME="$ECR_REGISTRY/fanc-app-stg:$IMAGE_TAG"
          fi
          docker build -t $FULL_IMAGE_NAME .
          docker push $FULL_IMAGE_NAME

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_CHANNEL: dev_fanc_api
          SLACK_TITLE: ${{ if eq(job.status, 'success') }}デプロイが成功しました${{ else }}デプロイが失敗しました${{ end }}
          SLACK_COLOR: ${{ if eq(job.status, 'success') }}good${{ else }}danger${{ end }}
          SLACK_USERNAME: ちくわ
          SLACK_WEBHOOK: ${{ secrets.DEV_FANC_API_SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: '${{ if eq(job.status, 'failure') }}<!channel> ${{ end }}Job ${{ job.status }}. (${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }})'

  update-task-definition:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Check if jq is installed
        run: |
          if which jq; then
            echo "jq is installed"
          else
            echo "jq is not installed"
          fi

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Update Amazon ECS service
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            TASK_DEFINITION_NAME="fanc-api-definition-task-prod"
            ECS_SERVICE_NAME="fanc-api-service-prod-6-3"
            ECS_CLUSTER_NAME="fanc-api-cluster-prod"
            FULL_IMAGE_NAME="$ECR_REGISTRY/fanc-app:$IMAGE_TAG"
          else
            TASK_DEFINITION_NAME="fanc-api-definition-task-stg"
            ECS_SERVICE_NAME="fanc-api-service-stg"
            ECS_CLUSTER_NAME="fanc-api-cluster-stg"
            FULL_IMAGE_NAME="$ECR_REGISTRY/fanc-app-stg:$IMAGE_TAG"
          fi
          CURRENT_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME --query "taskDefinition" --output json)
          echo "Current Task Definition:"
          echo $CURRENT_TASK_DEFINITION
          NEW_TASK_DEFINITION=$(echo $CURRENT_TASK_DEFINITION | jq --arg IMAGE "$FULL_IMAGE_NAME" ' .containerDefinitions[0].image=$IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          echo "New Task Definition:"
          echo $NEW_TASK_DEFINITION
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" | jq -r .taskDefinition.taskDefinitionArn)
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $TASK_DEF_ARN

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_CHANNEL: dev_fanc_api
          SLACK_TITLE: ${{ if eq(job.status, 'success') }}デプロイが成功しました${{ else }}デプロイが失敗しました${{ end }}
          SLACK_COLOR: ${{ if eq(job.status, 'success') }}good${{ else }}danger${{ end }}
          SLACK_USERNAME: ちくわ
          SLACK_WEBHOOK: ${{ secrets.DEV_FANC_API_SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: '${{ if eq(job.status, 'failure') }}<!channel> ${{ end }}Job ${{ job.status }}. (${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }})'
